package service

import (
	_ "carcat/docs" // docs is generated by Swag CLI, replace with your own path
	"carcat/internal/logger"
	"carcat/internal/storage"
	"log/slog"
	"net/http"
	"os"

	"github.com/gorilla/mux"
	httpSwagger "github.com/swaggo/http-swagger" // http-swagger middleware
)

type Service struct {
	cfg    *config
	log    *slog.Logger
	store  store
	router *mux.Router
}

func New(cfg *config) Service {
	return Service{
		cfg:    cfg,
		log:    logger.NewLogger(),
		router: mux.NewRouter(),
	}
}

func (s *Service) Start() {
	if err := s.startDb(); err != nil {
		s.log.Debug("database lost connection")
		os.Exit(1)
	}
	s.log.Debug("database connected")
	s.routeGroup()
	s.log.Debug("starting API server")
	if err := http.ListenAndServe(s.cfg.router.Port, s.router); err != nil {
		s.log.Error("http connect lost: %w", err)
	}
}
func (s *Service) routeGroup() {
	s.router.HandleFunc("/cars", s.getCars()).Methods("GET")
	s.router.HandleFunc("/cars", s.postCars()).Methods("POST")
	s.router.HandleFunc("/cars/{regnum}", s.patchCars()).Methods("PATCH")
	s.router.HandleFunc("/cars/{regnum}", s.delCars()).Methods("DELETE")
	s.router.PathPrefix("/swagger/").Handler(httpSwagger.WrapHandler)
}

func (s *Service) startDb() error {
	db := storage.New(s.cfg.db)
	if err := db.Open(); err != nil {
		return err
	}
	if err := db.MigUp(); err != nil {
		return err
	}
	s.store = db.Interact()
	return nil
}
